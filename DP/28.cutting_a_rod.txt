Problem Description :
Given a rod of length N units and an array A of size N denotes prices that contains prices of all pieces of size 1 to N.

Find and return the maximum value that can be obtained by cutting up the rod and selling the pieces.


Problem Constraints :
1 <= N <= 1000

0 <= A[i] <= 106



Input Format:
First and only argument is an integer array A of size N.



Output Format :
Return an integer denoting the maximum value that can be obtained by cutting up the rod and selling the pieces.



Example Input:
Input 1:
 A = [3, 4, 1, 6, 2]
Input 2:
 A = [1, 5, 2, 5, 6]


Example Output:

Output 1:
 15

Output 2:
 11


Example Explanation
Explanation 1:
 Cut the rod of length 5 into 5 rods of length (1, 1, 1, 1, 1) and sell them for (3 + 3 + 3 + 3 + 3) = 15.
Explanation 2:
 Cut the rod of length 5 into 3 rods of length (2, 2, 1) and sell them for (5 + 5 + 1) = 11.

================================================================================================================================================================================================================================



let A = [3, 4, 1, 6, 2]
let ans = solve(A)
console.log(ans)

function solve(A) {
    //https://www.youtube.com/watch?v=KvAsKDtEiPk
    const n = A.length
    const result = maxProfit(A, n);
    return (result);

    function maxProfit(prices, n) {
        const dp = new Array(n + 1).fill(0);//store the maximum profit obtainable for rods of different lengths.
        for (let i = 1; i <= n; i++) {
            for (let j = 0; j < i; j++) {
                dp[i] = Math.max(dp[i], prices[j] + dp[i - j - 1]);
            }
        }
        return dp[n];//returns the maximum value that can be obtained by cutting up the rod and selling the pieces.
    }
}

//It iterates from length 1 to n, inclusive.For each length i, it calculates the maximum profit obtainable by considering all possible cuts.

//Inside the inner loop, it iterates from 0 to i - 1, inclusive, considering all possible cuts of length j.

//For each cut length j, it calculates the profit obtainable by selling the cut piece at price prices[j] and adding it to the maximum profit obtainable from the remaining rod of length i - j - 1, which is stored in dp[i - j - 1].

//It updates the maximum profit for rod of length i in the dp array.

//Finally, it returns the maximum profit obtainable for the rod of length n, which is stored in dp[n].

//So, the code efficiently calculates the maximum value that can be obtained by cutting up the rod and selling the pieces using dynamic programming.

================================================================================================================================================================================================================================
