
Problem Description :
Implement wildcard pattern matching with support for ' ? ' and ' * ' for strings A and B.

' . ' : Matches any single character.
' * ' : Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).



Problem Constraints :
1 <= length(A), length(B) <= 104



Input Format :
The first argument of input contains a string A.
The second argument of input contains a string B denoting the pattern.



Output Format:
Return 1 if the patterns match else return 0.



Example Input:
Input 1:

 A = "aab"
 B = "c*a*b"
Input 2:

 A = "acz"
 B = "a.a"


Example Output:
Output 1:

 1
Output 2:

 0


Example Explanation:
Explanation 1:

 'c' can be repeated 0 times, 'a' can be repeated 1 time. Therefore, it matches "aab".
 So, return 1.
Explanation 2:

 '.' matches any single character. First two character in string A will be match. 
 But the last character i.e 'z' != 'a'. Return 0.

==========================================================================



function solution(s, p) {
    const dp = Array(p.length + 1).fill(null).map(() => Array(s.length + 1).fill(false));
    // x-axis is having the pattern(p)
    // y-axis is having the string(s)
    for (let i = 0; i < dp.length; i++) {
        for (let j = 0; j < dp[0].length; j++) {
            if (i === 0 && j === 0) {
                dp[i][j] = true;
            } else if (i === 0) {
                dp[i][j] = false;
            } else if (j === 0) {
                // pc- pattern character
                // sc- string character
                const pc = p.charAt(i - 1);
                if (pc === '*') {// look 2 rows above , as when it disappears , we will land on the 2nd row that is above.
                    dp[i][j] = dp[i - 2][j];
                } else {
                    dp[i][j] = false;
                }
            } else {
                const pc = p.charAt(i - 1);
                const sc = s.charAt(j - 1);
                if (pc === '*') {
                    dp[i][j] = dp[i - 2][j];
                    const pslc = p.charAt(i - 2);//pattern second last character
                    if (pslc === '.' || pslc === sc) {// from previous column
                        dp[i][j] = dp[i][j] || dp[i][j - 1];
                    }
                } else if (pc === '.') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pc === sc) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = false;
                }
            }
        }
    }

    return dp[p.length][s.length];
}

// Example usage
console.log(solution("aab", "c*a*b")); // Example result: true
=============================================================================================================