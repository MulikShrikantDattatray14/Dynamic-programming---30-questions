function maxSubsequenceSum(arr) {
    if (arr.length === 0) return 0;
    if (arr.length === 1) return arr[0];

    //Initialize dp array to store maximum subsequence sum
    const dp = new Array(arr.length).fill(0);

    // Base cases
    dp[0] = Math.max(0, arr[0]);
    dp[1] = Math.max(dp[0], arr[1]);

    // Dynamic programming approach to find the maximum subsequence sum
    for (let i = 2; i < arr.length; i++) {
        //  dp[i] stores the maximum sum of a subsequence that ends at the i-th element of the array.
        // if you choose current element , you cant choose arr[i-1]th element , so dp[i-2]+arr[i]
        // if you are not choosing the current element , so you can choose the previous element
        dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i], arr[i]);
    }

    return dp[arr.length - 1];
}
//Certainly! Let's break down the line dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i], arr[i]);:

// dp[i]: This represents the maximum subsequence sum ending at index i. In other words, dp[i] stores the maximum sum of a subsequence that ends at the i-th element of the array.

// Math.max(): This is a JavaScript function that returns the maximum of the values passed to it.

// dp[i - 1]: This represents the maximum subsequence sum ending at the previous element, i.e., the (i - 1)-th element of the array.

// dp[i - 2] + arr[i]: This represents the maximum subsequence sum ending two elements before, plus the current element arr[i]. Since the problem specifies that two adjacent elements cannot be included in the subsequence, we need to skip the (i - 1)-th element, hence we add the sum of dp[i - 2] with the current element arr[i].

// arr[i]: This represents the current element. This is included in the calculation because if adding the current element alone produces a larger sum than the previous two elements, it might be beneficial to start a new subsequence from this element.

// Overall, this line of code updates dp[i] with the maximum subsequence sum ending at index i, considering two possibilities: either including the current element arr[i], or starting a new subsequence from the current element.

// Example usage
const arr = [-50, -100, 500];
console.log("Maximum subsequence sum:", maxSubsequenceSum(arr)); // Output: 35
