Problem Description :-

You are given an array A of N integers and three integers B, C, and D.

You have to find the maximum value of A[i]*B + A[j]*C + A[k]*D, where 1 <= i <= j <= k <= N.



Problem Constraints

1 <= N <= 105

-10000 <= A[i], B, C, D <= 10000



Input Format

First argument is an array A
Second argument is an integer B
Third argument is an integer C
Fourth argument is an integer D



Output Format:-

Return an Integer S, i.e maximum value of (A[i] * B + A[j] * C + A[k] * D), where 1 <= i <= j <= k <= N.



Example Input:-


Input 1:

 A = [1, 5, -3, 4, -2]
 B = 2
 C = 1
 D = -1
Input 2:

 A = [3, 2, 1]
 B = 1
 C = -10
 D = 3


Example Output

Output 1:

 18
Output 2:

 -4


Example Explanation

Explanation 1:

 If you choose i = 2, j = 2, and k = 3 then we will get
 A[2]*B + A[2]*C + A[3]*D = 5*2 + 5*1 + (-3)*(-1) = 10 + 5 + 3 = 18
Explanation 2:

 If you choose i = 1, j = 3, and k = 3 then we will get
 A[1]*B + A[3]*C + A[3]*D = (3*1) + (-10*1) + (3*1) = 3 - 10 + 3 = -4

 ====================================================================================================================================================================================

 //where 1 <= i <= j <= k <= N.

let A = [1, 5, -3, 4, -2];
let B = 2;
let C = 1;
let D = -1;
let n = A.length;
let dp = new Array(n + 1)
  .fill(-Infinity)
  .map(() => new Array(3).fill(-Infinity));

for (let i = 1; i <= n; i++) {
  dp[i][0] = Math.max(dp[i - 1][0], A[i - 1] * B);
  dp[i][1] = Math.max(dp[i - 1][1], dp[i][0] + A[i - 1] * C);
  dp[i][2] = Math.max(dp[i - 1][2], dp[i][1] + A[i - 1] * D);
}

let ans1 = dp[n][2];
console.log(ans1);
//===========================================================================
//where 1 <= i < j < k <= N.

let A = [1, 5, -3, 4, -2];
let B = 2;
let C = 1;
let D = -1;
let n = A.length;
let dp = new Array(n + 1)
  .fill(-Infinity)
  .map(() => new Array(3).fill(-Infinity));

for (let i = 1; i <= n; i++) {
  dp[i][0] = Math.max(dp[i - 1][0], A[i - 1] * B);
  dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + A[i - 1] * C);
  dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + A[i - 1] * D);
}

let ans1 = dp[n][2];
console.log(ans1);
//==================================================================================

// A = [1, 5, -3, 4, -2];
// B = 2;
// C = 1;
// D = -1;
// let ans = Number.MIN_SAFE_INTEGER;
// for (let i = 0; i < n; i++) {
//   for (let j = i+1; j < n; j++) {
//     for (let k = j+1; k < n; k++) {
//       let each = A[i] * B + A[j] * C + A[k] * D;
//       ans=Math.max(ans,each)
//       console.log(ans)
//     }
//   }
// }


=====================================================================================================================================================================================