Problem Description
Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). 
At any instance, if you are on (x, y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. 
Return the total number unique paths from (1, 1) to (n, m).

Note: 
1. An obstacle is marked as 1 and empty space is marked 0 respectively in the grid.
2. Given Source Point and Destination points are 1-based index.


Problem Constraints
1 <= n, m <= 100
A[i][j] = 0 or 1


Input Format
Firts and only argument A is a 2D array of size n * m.


Output Format
Return an integer denoting the number of unique paths from (1, 1) to (n, m).


Example Input
Input 1:

 A = [
        [0, 0, 0]
        [0, 1, 0]
        [0, 0, 0]
     ]
Input 2:

 A = [
        [0, 0, 0]
        [1, 1, 1]
        [0, 0, 0]
     ]


Example Output
Output 1:

 2
Output 2:

 0


Example Explanation
Explanation 1:

 Possible paths to reach (n, m): {(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)} and {(1 ,1), (2, 1), (3, 1), (3, 2), (3, 3)}  
 So, the total number of unique paths is 2. 
Explanation 2:

 It is not possible to reach (n, m) from (1, 1). So, ans is 0.

 =======================================================================================
=========================================================================================
function numberOfWaysWithBlockedCells(matrix) {
  const rows = matrix.length;
  const cols = matrix[0].length;

  // Create a 2D array to store the number of ways to reach each cell
  const dp = new Array(rows).fill(0).map(() => new Array(cols).fill(0));

  // If the starting cell is blocked, there are no ways to reach the destination
  if (matrix[0][0] === 1) {
    return 0;
  }

  dp[0][0] = 1;

  // Fill the first column
  for (let i = 1; i < rows; i++) {
    if (matrix[i][0] === 0) {
      dp[i][0] = dp[i - 1][0];
    }
  }

  // Fill the first row
  for (let j = 1; j < cols; j++) {
    if (matrix[0][j] === 0) {
      dp[0][j] = dp[0][j - 1];
    }
  }

  // Fill the rest of the dp table
  for (let i = 1; i < rows; i++) {
    for (let j = 1; j < cols; j++) {
      if (matrix[i][j] === 0) {
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
      }
    }
  }

  // The bottom-right cell contains the total number of ways to reach the destination
  return dp[rows - 1][cols - 1];
}

// Example usage:
const matrix = [
  [0, 0, 1, 0],
  [0, 0, 0, 0],
  [0, 0, 0, 0],
];

console.log(numberOfWaysWithBlockedCells(matrix)); // Output: 2


======================================================================================================================================================================================

//Another way of writing the code : 

function countPaths(A) {
  if (A[0][0] === 1) return 0;

  const dp = new Array(A.length)
    .fill(0)
    .map(() => new Array(A[0].length).fill(0));
  dp[0][0] = 1;

  for (let i = 1; i < A[0].length; i++) {
    if (A[0][i] === 1) {
      //blocked
      dp[0][i] = 0;
    } else {
      dp[0][i] = dp[0][i - 1];
    }
  }

  for (let i = 1; i < A.length; i++) {
    if (A[i][0] === 1) {
      //blocked
      dp[i][0] = 0;
    } else {
      dp[i][0] = dp[i - 1][0];
    }
  }

  for (let i = 1; i < A.length; i++) {
    for (let j = 1; j < A[0].length; j++) {
      if (A[i][j] === 1) {
        //blocked
        dp[i][j] = 0;
      } else {
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
      }
    }
  }

  return dp[A.length - 1][A[0].length - 1];
}
A = [[0, 0, 0],[0, 1, 0],[0, 0, 0]];
let ans = countPaths(A);
console.log(ans);


======================================================================================================================================================================================