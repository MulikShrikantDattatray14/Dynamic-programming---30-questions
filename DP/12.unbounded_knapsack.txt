Problem Description :
Given a knapsack weight A and a set of items with certain value B[i] and weight C[i], we need to calculate maximum amount that could fit in this quantity.

This is different from classical Knapsack problem, here we are allowed to use unlimited number of instances of an item.



Problem Constraints:

1 <= A <= 1000
1 <= |B| <= 1000
1 <= B[i] <= 1000
1 <= C[i] <= 1000


Input Format :

First argument is the Weight of knapsack A
Second argument is the vector of values B
Third argument is the vector of weights C


Output Format :
Return the maximum value that fills the knapsack completely

Example Input : 

Input 1:
A = 10
B = [5]
C = [10]

Input 2:

A = 10
B = [6, 7]
C = [5, 5]


Example Output
Output 1:

 5
Output 2:

14


Example Explanation
Explanation 1:

Only valid possibility is to take the given item.
Explanation 2:

Take the second item twice.

======================================================================================================================================================================================


//logic :- same as the previous question , here one item can be picked as many times as you want 
//First argument is the Weight of knapsack A
//Second argument is the vector of values B
//Third argument is the vector of weights C

A = 10;
B = [6, 7];
C = [5, 5];
let ans = knapSack(A, C, B, B.length);
console.log(ans);

function knapSack(capacity, wt, val, n) {
    let i, w;
    let K = new Array(n + 1);
    // dp state - same as the previous question 
    // Build table K[][] in bottom up manner
    for (i = 0; i <= n; i++) {
        //values
        K[i] = new Array(capacity + 1);
        for (w = 0; w <= capacity; w++) {
            //capacity
            if (i == 0 || w == 0) K[i][w] = 0;
            else if (wt[i - 1] <= w)
                // picked -val[i - 1] + K[i][w - wt[i - 1]] ; same item can be picked again and again 
                // not picked - K[i - 1][w]
                K[i][w] = Math.max(val[i - 1] + K[i][w - wt[i - 1]], K[i - 1][w]);
            //capacity exceded
            else K[i][w] = K[i - 1][w];
        }
    }

    return K[n][capacity];
}


========================================================================================