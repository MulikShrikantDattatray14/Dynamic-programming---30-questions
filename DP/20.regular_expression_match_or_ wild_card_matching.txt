Problem Description :-

Implement wildcard pattern matching with support for ' ? ' and ' * ' for strings A and B.

' ? ' : Matches any single character.
' * ' : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).


Problem Constraints :
1 <= length(A), length(B) <= 104

Input Format :

The first argument of input contains a string A.
The second argument of input contains a string B.

Output Format :
Return 1 if the patterns match else return 0.

Example Input :

Input 1:
 A = "aaa"
 B = "a*"
Input 2:
 A = "acz"
 B = "a?a"

Example Output
Output 1:
 1
Output 2:
 0

Example Explanation :
Explanation 1:
 Since '*' matches any sequence of characters. Last two 'a' in string A will be match by '*'.
 So, the pattern matches we return 1.

Explanation 2:
 '?' matches any single character. First two character in string A will be match. 
 But the last character i.e 'z' != 'a'. Return 0.

======================================================================================================================================================================================


function isMatch(s, p) {
    const N = s.length;
    const M = p.length;

    const dp = Array(N + 1).fill(null).map(() => Array(M + 1).fill(false));

    dp[0][0] = true;// empty spaces from both-string and pattern always matches.

    for (let i = 1; i <= M; i++) {
        if (p[i - 1] === '*') {
            dp[0][i] = true;
        } else {
            break;
        }
    }


    for (let i = 1; i <= N; i++) {
        for (let j = 1; j <= M; j++) {
            if (s[i - 1] === p[j - 1] || p[j - 1] === '?') {
                dp[i][j] = dp[i - 1][j - 1];// then try checking the previous strings
            } else if (p[j - 1] === '*') {
                dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
            }
        }
    }

    return dp[N][M];
}

// Example usage:
const satisfies = "acdcb";
const pattern = "a*c?b";
console.log(isMatch(satisfies, pattern)); // Output: true or false

========================================================================================================
// try a iterative way : ( later)