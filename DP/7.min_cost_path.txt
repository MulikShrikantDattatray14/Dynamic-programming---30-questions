Problem Description:-

Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.



Problem Constraints
1 <= M, N <= 2000

-1000 <= A[i][j] <= 1000



Input Format
First and only argument is a 2-D grid A.



Output Format
Return an integer denoting the minimum sum of the path.



Example Input
Input 1:

 A = [
       [1, 3, 2]
       [4, 3, 1]
       [5, 6, 1]
     ]
Input 2:

 A = [
       [1, -3, 2]
       [2, 5, 10]
       [5, -5, 1]
     ]


Example Output
Output 1:

 8
Output 2:

 -1


Example Explanation
Explanation 1:

 The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:

 The path will be: 1 -> -3 -> 5 -> -5 -> 1.

======================================================================================================================================================================================

function minCostPath(matrix) {
  const rows = matrix.length;
  const cols = matrix[0].length;

  // Create a DP table to store minimum costs
  const dp = new Array(rows).fill(0).map(() => new Array(cols).fill(0));

  // Base case: The cost to reach the first cell is the same as the input matrix
  dp[0][0] = matrix[0][0];

  // Initialize the first row- prefix sum rowwise
  for (let i = 1; i < cols; i++) {
    dp[0][i] = dp[0][i - 1] + matrix[0][i];
  }

  // Initialize the first column- prefix sum columnwise
  for (let i = 1; i < rows; i++) {
    dp[i][0] = dp[i - 1][0] + matrix[i][0];
  }

  // Calculate minimum cost to reach each cell
  for (let i = 1; i < rows; i++) {
    for (let j = 1; j < cols; j++) {
      dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
    }
  }
 
  // Return the minimum cost to reach the last cell
  return dp[rows - 1][cols - 1];
}

// Example usage:
const matrix = [
  [2, 1, 3, 7, 3],
  [3, 3, 4, 8, 3],
  [0, 5, 1, 2, 1],
  [0, 2, 3, 1, 3],
  [7, 1, 3, 2, 4],
  [4, 1, 5, 2, 3],
];

console.log(
  "Minimum cost to reach the bottom-right cell:",
  minCostPath(matrix)
); // Output: 18


======================================================================================================================================================================================