Problem Description:-

Given a triangle, find the minimum path sum from top to bottom.Each step you may move to adjacent numbers on the row below.

Adjacent numbers for jth column of ith row is jth and (j+1)th column of (i + 1)th row.

Problem Constraints:-

|A| <= 1000

A[i] <= 1000



Input Format:-

First and only argument is the vector of vector A defining the given triangle



Output Format:-

Return the minimum sum



Example Input:-

Input 1:

 
A = [ 
         [2],
        [3, 4],
       [6, 5, 7],
      [4, 1, 8, 3]
    ]
Input 2:

 A = [ [1] ]


Example Output
Output 1:

 11
Output 2:

 1


Example Explanation
Explanation 1:

 The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Explanation 2:

 Only 2 can be collected.

 ===================================================================================================================================================================================

 --------------

function minimumTotal(A) {
    const n = A.length;
    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));

    // Copy the last row as base case
    for (let j = 0; j < n; j++) {
        dp[n - 1][j] = A[n - 1][j];
    }

    // Iterate from bottom up
    for (let i = n - 2; i >= 0; i--) {
        for (let j = 0; j <= i; j++) {
            dp[i][j] = A[i][j] + Math.min(dp[i + 1][j], dp[i + 1][j + 1]);

        }
    }

    return dp[0][0];
}

// Example usage:
const A1 = [
    [2],
    [3, 4],
    [6, 5, 7],
    [4, 1, 8, 3]
];
console.log(minimumTotal(A1)); // Output: 11

const A2 = [
    [1]
];
console.log(minimumTotal(A2)); // Output: 1

======================================================================================================================================================================================