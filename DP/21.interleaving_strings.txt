Problem Description
Given A, B, C find whether C is formed by the interleaving of A and B.



Problem Constraints
1 <= length(A), length(B) <= 100

1 <= length(C) <= 200



Input Format
The first argument of input contains a string, A.
The second argument of input contains a string, B.
The third argument of input contains a string, C.



Output Format
Return 1 if string C is formed by interleaving of A and B else 0.



Example Input
Input 1:

 A = "aabcc"
 B = "dbbca"
 C = "aadbbcbcac"
Input 2:

 A = "aabcc"
 B = "dbbca"
 C = "aadbbbaccc"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 "aa" (from A) + "dbbc" (from B) + "bc" (from A) + "a" (from B) + "c" (from A)
Explanation 2:

 It is not possible to get C by interleaving A and B.

 ====================================================================================================================================================================================

 // recursive DP:
 
note :-
dp[i][j] represents that if C[0...i+j-1] is interleaving of A[0...i-1] and B[0....j-1]

function solution1(s1, s2, s3, i, j, dp) {
    if (i === s1.length && j === s2.length) {
        return true;
    }
    if (dp[i][j] !== undefined) return dp[i][j];
    if (i < s1.length && s1.charAt(i) === s3.charAt(i + j)) {
        let f1 = solution1(s1, s2, s3, i + 1, j, dp);
        dp[i][j] = f1;
        if (f1 === true) return true;
    }
    if (j < s2.length && s2.charAt(j) === s3.charAt(i + j)) {
        let f2 = solution1(s1, s2, s3, i, j + 1, dp);
        dp[i][j] = f2;
        if (f2 === true) return true;
    }
    dp[i][j] = false;
    return false;
}

function interleaving(s1, s2, s3) {
    if (s1.length + s2.length !== s3.length) return false;
    let dp = new Array(s1.length + 1).fill(null).map(() => new Array(s2.length + 1));
    let ans = solution1(s1, s2, s3, 0, 0, dp);
    return ans;
}

if (interleaving(A, B, C)) return 1; // Output: true
else return 0;
======================================================================================================================================================================================
